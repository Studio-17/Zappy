#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

github_user_name="$(git config --list | awk -F\user.name= '$0=$2')"

declare -A user_array=(["Martin Vanaud"]=".github/environement/.martin.env" ["Victor PALLE"]=".github/environement/.victor.env" ["Gurvan Le Letty"]=".github/environement/.gurvan.env" ["Clement Fernandes"]=".github/environement/.clement.env" ["Maxime Carabina"]=".github/environement/.maxime.env")

if [[ ${user_array[$github_user_name]} ]]; then
    printf "\033[0;32mâœ“\033[0m User found ...\n"
    printf "Processing ...\n"
else
    printf "Unknown user '$github_user_name' ...\n" >&2
    printf "Exiting ...\n" >&2
    exit 1
fi

for name in "${!user_array[@]}"; do
    if [[ $github_user_name =~ $name ]]; then
        printf "Welcome $name\n"
        sleep 1
        gh secret set --env-file ${user_array[$name]}
        git config --list
    fi
done
